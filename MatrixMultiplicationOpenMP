#include <iostream>
#include <fstream>
#include <cstdlib>
#include <ctime>
#include <omp.h>

using namespace std;

void multiplyMatrices(int A[][100], int B[][100], int C[][100], int N) {
    #pragma omp parallel for collapse(2)
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j) {
            C[i][j] = 0;
            for (int k = 0; k < N; ++k) {
                C[i][j] += A[i][k] * B[k][j];
            }
        }
    }
}

void printMatrix(int matrix[][100], int N) {
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j) {
            cout << matrix[i][j] << " ";
        }
        cout << endl;
    }
}

int main() {
    int N;
    cout << "Enter the size of matrices (N): ";
    cin >> N;

    // Initialize random seed
    srand(static_cast<unsigned int>(time(nullptr)));

    // Create matrices A, B, and C
    int A[100][100], B[100][100], C[100][100];

    // Initialize matrices A and B with random values
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j) {
            A[i][j] = rand() % 100; // Random values between 0 and 99
            B[i][j] = rand() % 100;
        }
    }

    // Perform matrix multiplication
    double startTime = omp_get_wtime();
    multiplyMatrices(A, B, C, N);
    double endTime = omp_get_wtime();

  

    return 0;
}
